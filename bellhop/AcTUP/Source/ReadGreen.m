function [SourceDepth, ReceiverDepth, Freq, Kr, GKr, Title] = ReadGreen(FileName)
%[SourceDepth, ReceiverDepth, Freq, Kr, GKr, Title] = ReadGreen(FileName)
%
%Function to read in a Greens function file generated by Scooter
%This is in binary format, so this may not work on all platforms
%
%FileName - full filename, including path, of greens function file
%
%SourceDepth - row vector of source depths (m)
%ReceiverDepth - row vector of receiver depths (m)
%Freq - frequency (Hz)
%Kr row vector of horizontal wavenumbers
%GKr - Greens function.  This is of dimension GKr(NKr, NReceiverDepths, NSourceDepths).
%Title - title read from Greens function file
%
%Alec Duncan,
%Centre for Marine science and Technology
%Curtin University
%Western Australia
%May 2002
%
% Revision 1.0     10 May   2006 ... ALM
%                  - Modify for Mike Porter's 2006 release of AT (scooter writes header differently now)
%                  - On failure attempts to use previous version for reasons of backward compatibility 
% Revision 1.01    07 July  2006 ... ALM
%                  - fix typo in comments (so they make sense !) - no code change

% 2006 release of AT writes Green's functions to a file using the same format as shade files substituting range data for kr data

try
   % try pre-2006-AT .grn file first - this should fail catastrophically if post-2006-format is used 
   % (whereas not necessarily the case in reverse - i.e. no crash but crap out)
   [SourceDepth, ReceiverDepth, Freq, Kr, GKr, Title] = ReadGreen_v0(FileName);
   % the Green's function uses storage space in the shd format
catch
   % error might be due to reading post-2006-AT .grn file - 2006 release uses shade file format !
   try
      [ Title, Freq, nsd, nrd, nrr, SourceDepth, ReceiverDepth, rr, tlt, FileStatus ] = ReadShadeBin( FileName );
      Kr  = rr;
      GKr = tlt;
   catch
      uiwait(errordlg(['ERROR->ReadGreen: FAILED to read ', FileName, ' using both pre- & post-2006-release formats'], 'modal'));
      eflag = TRUE;
   end
end



